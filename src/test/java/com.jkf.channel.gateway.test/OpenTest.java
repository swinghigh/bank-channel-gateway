package com.jkf.channel.gateway.test;

import cn.hutool.core.codec.Base64;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.jkf.channel.gateway.constant.OpenMethodEnum;
import com.jkf.channel.gateway.utils.HttpUtil;
import com.jkf.channel.gateway.utils.SecurityUtil;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.StringUtils;
import org.junit.Test;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

/**
 * @author xiangyu
 * @date 2023/11/1 9:12
 */
@Slf4j
public class OpenTest {

    private static String merPublicKey="MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkKU1KkwSJJqVTEDwy0j4PYnyXftvJNVRltfpx8lwi9eiXJG/h7U7wpCazshVgV3rbijpPqUXI2NNj0V5bUDE74t6OjAZO/482kAJyaVCLswJqgPAC0+ZJBfiC2qRp4Z6fs6mA8d2AoLSKGzBSXY8yM858LWscgvLDbqvpD+ZvE73XpUzuEdwSmfmg0J+ijwpP0c0dy1F+YF4spUS9tfv9FNsPlw3u41//eMXK/47ab+mrjsrpwTpxeGiMAXjUryERL/yFYviuCamnJTbQD2KeX2QZAeIBNmVMQt4XlaiqSj/Bi0Q4Ljcl+r+xOMfQUCtrVhxBIGNC4Wkjvs552J2vQIDAQAB";//机构公钥
    private static String mer_priKey="MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCQpTUqTBIkmpVMQPDLSPg9ifJd+28k1VGW1+nHyXCL16Jckb+HtTvCkJrOyFWBXetuKOk+pRcjY02PRXltQMTvi3o6MBk7/jzaQAnJpUIuzAmqA8ALT5kkF+ILapGnhnp+zqYDx3YCgtIobMFJdjzIzznwtaxyC8sNuq+kP5m8TvdelTO4R3BKZ+aDQn6KPCk/RzR3LUX5gXiylRL21+/0U2w+XDe7jX/94xcr/jtpv6auOyunBOnF4aIwBeNSvIREv/IVi+K4JqaclNtAPYp5fZBkB4gE2ZUxC3heVqKpKP8GLRDguNyX6v7E4x9BQK2tWHEEgY0LhaSO+znnYna9AgMBAAECggEAPmjZ8J8T8PE128nlW4Dngv3jMkPLZ9QWuQP+HbK/ucbXiiNkxXQgDcoA0ZnEsuXIMCa8xMfMnPs6useaJdadYlIG8dZQ/P6sWOrqjjOcw75LqSynDvpQNC+N26kmoWa3scEOBnFobJrvfHu4Ri8a+PXYpRBuEGMgQJM9N5wtg/7RXy+Pc7bYberZ+cUmOqS37GXh6R40OGMq3XH0RlnJWUaKxxAtNHAP5xIpm1H3MRB9PeqLXTypkbsgZrM6UBxSYeqHaXzAIm58AdWFxCfznLO44iSq1/uuiItCbGYcVbibcq43KDUStWtKvrkU2+0/lxZcjaRvPAx+Xt2R7Rh1YQKBgQDoVxg5Lql7HlH49md5d3fPF0EP6UcHbQHlT8OuF3WnLDIEAuZr26hlrbJB/NKaz246C6+xzq2fSq7gKoxbddY7r+VIlqvkI36fSaTtFLRP7niwAir0shOiP+mrs/0cBU11hdKlhGY1iNIZo3pvyavtHEddCagtDNbyqmbUE1jqpQKBgQCfX/wZaCTw5rUtJNv2HC7SpUTeyiOTzF/36IJzrAYm0oGt7ZfaOkDhytXLtcv5g9LSAEHltUALOOmtssRmvi0MdNVc6eR6sM53BUhGqO0+FgUyde2Dqg9ysN+luKPYyor2FYAOLih0t9wVI9Y3SNjUC9ti3si1f7QPSI5FRD/YOQKBgBIkArssPoVjZ6kVrByazFr6CNVyNF6LD1PVN4UXRdNoqvsPMuiG/Q37Uui+Eb+OpJ+Zm/05EutWDHNqPw1BFRoR8MgLI56res57FIqCTFXVW8z6TlpOsSPA88C5S/DtJRAhA8JypPxXE3h3AC9MQsU/qP7Fq0DhOMM3tNGoNRAVAoGAbBhMAmdydrnjtETFs70VvOU/OuRbEQmTJa/bmtzYJ0irj+4QCoFsNDjAnTQmrotMWAa4qzYtw+7L/3W6Y/0kzMgJVsWEo/p7bpp0lQhKMMv6pmj5uU2EwMNaTSpYZtepPJMEkZmY8uEpMmVmC4UrG1cXa42zD/cXhy4s4KoTq3ECgYEArfG+VyyKMv2bVHXlengyIC3QGlgI5cjxBe8VN2vxa5g7i/tYtFIktzDm1HRKtIFIwcPPBRxXNawNgOQQVI9ilSHnPpsTxoXmXpJAxBst8fw4SN/r+a2vzjfdKZ6wsnppRDby0olDuQL8mWriBDCokc2NGHlJ0IyL7G88pPYlRBE==";//机构私钥
    private static String orgNo="1000000000";//机构号
    private static String pt_pubKey="MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkKU1KkwSJJqVTEDwy0j4PYnyXftvJNVRltfpx8lwi9eiXJG/h7U7wpCazshVgV3rbijpPqUXI2NNj0V5bUDE74t6OjAZO/482kAJyaVCLswJqgPAC0+ZJBfiC2qRp4Z6fs6mA8d2AoLSKGzBSXY8yM858LWscgvLDbqvpD+ZvE73XpUzuEdwSmfmg0J+ijwpP0c0dy1F+YF4spUS9tfv9FNsPlw3u41//eMXK/47ab+mrjsrpwTpxeGiMAXjUryERL/yFYviuCamnJTbQD2KeX2QZAeIBNmVMQt4XlaiqSj/Bi0Q4Ljcl+r+xOMfQUCtrVhxBIGNC4Wkjvs552J2vQIDAQAB";//机构公钥
    private static String payUrl="http://192.168.1.111:7000/openChannel/buss";//请求地址
//    private static String payUrl="http://192.168.1.8:7000/openChannel/buss";
    @Test
    public void t(){

        Map<String,Object> reqData=new HashMap<>();
        reqData.put("test","测试");
        commonRequest(reqData, OpenMethodEnum.TEST.getMethod());
    }
    @Test
    public void fileUpload(){
        try {
            String fileNamePath = "D:\\\\科旅元素\\\\我的信息\\\\银行卡照片.jpg";
            byte[] bFile = Files.readAllBytes(Paths.get(fileNamePath));
            String fileContent = Base64.encode(bFile);
            Map<String, Object> reqData = new HashMap<>();
            reqData.put("fileContent", fileContent);
            reqData.put("fileName", "test.jpg");
            commonRequest(reqData, OpenMethodEnum.FILE_UPLOAD.getMethod());
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    @Test
    public void agentAdd(){
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("outAgentNo", System.currentTimeMillis()+"");
        reqData.put("pAgentId","4");
        reqData.put("agentName", "测试代理商1");
        reqData.put("proviceCode", "500000");
        reqData.put("agentName", "测试代理商2");
        reqData.put("cityCode", "500100");
        reqData.put("countryCode", "500105");
        reqData.put("address", "重庆市江北区五里店街道科金大厦");
        reqData.put("agentType", "1");
        reqData.put("businessLicense", "12345678");
        reqData.put("businessAmt", "20");
        reqData.put("businessExpireStart", "2023-11-14");
        reqData.put("businessExpireEnd", "2199-12-31");
        reqData.put("legalName", "李先生");
        reqData.put("legalCertType", "1");
        reqData.put("legalCertNo", "422222222222222");
        reqData.put("legalPhone", "19607111111");
        reqData.put("legalExpireStart", "2023-11-14");
        reqData.put("legalExpireEnd", "2043-11-14");
        reqData.put("contactName", "王先生");
        reqData.put("contactCertType", "1");
        reqData.put("contactCertNo", "500000000000");
        reqData.put("contactPhone", "196071112222");
        reqData.put("contactEmail", "34839@qq.com");
        List<Map<String,String>> fileContent=new ArrayList<>() ;
        Map<String,String> p1=new HashMap<>();
        p1.put("type","1");
        p1.put("fileId","1c2384c852d845dbbf5817636fefab64");
        fileContent.add(p1);
        Map<String,String> p2=new HashMap<>();
        p2.put("type","2");
        p2.put("fileId","1c2384c852d845dbbf5817636fefab64");
        fileContent.add(p2);
        Map<String,String> p3=new HashMap<>();
        p3.put("type","3");
        p3.put("fileId","1c2384c852d845dbbf5817636fefab64");
        fileContent.add(p3);
        Map<String,String> p4=new HashMap<>();
        p4.put("type","4");
        p4.put("fileId","1c2384c852d845dbbf5817636fefab64");
        fileContent.add(p4);
        Map<String,String> p5=new HashMap<>();
        p5.put("type","5");
        p5.put("fileId","1c2384c852d845dbbf5817636fefab64");
        fileContent.add(p5);
        reqData.put("fileContent", fileContent);
        commonRequest(reqData, OpenMethodEnum.AGENT_ADD.getMethod());
    }
    @Test
    public void agentEdit(){
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("outAgentNo", "1700103149269");
//        reqData.put("pAgentId","4");
//        reqData.put("agentName", "测试代理商1");
        reqData.put("proviceCode", "500000");
        reqData.put("agentName", "测试代理商修改测试");
        reqData.put("cityCode", "500100");
        reqData.put("countryCode", "500105");
        reqData.put("address", "重庆市江北区五里店街道科金大厦");
        reqData.put("agentType", "1");
        reqData.put("businessLicense", "12345678");
        reqData.put("businessAmt", "20");
        reqData.put("businessExpireStart", "2023-11-14");
        reqData.put("businessExpireEnd", "2199-12-31");
        reqData.put("legalName", "李先生1");
        reqData.put("legalCertType", "1");
        reqData.put("legalCertNo", "422222222222222");
        reqData.put("legalPhone", "19607111111");
        reqData.put("legalExpireStart", "2023-11-14");
        reqData.put("legalExpireEnd", "2043-11-14");
        reqData.put("contactName", "王先生");
        reqData.put("contactCertType", "1");
        reqData.put("contactCertNo", "500000000000");
        reqData.put("contactPhone", "196071112222");
        reqData.put("contactEmail", "34839@qq.com");
        List<Map<String,String>> fileContent=new ArrayList<>() ;
        Map<String,String> p1=new HashMap<>();
        p1.put("type","1");
        p1.put("fileId","1c2384c852d845dbbf5817636fefab64");
        fileContent.add(p1);
        Map<String,String> p2=new HashMap<>();
        p2.put("type","2");
        p2.put("fileId","1c2384c852d845dbbf5817636fefab64");
        fileContent.add(p2);
        Map<String,String> p3=new HashMap<>();
        p3.put("type","3");
        p3.put("fileId","1c2384c852d845dbbf5817636fefab64");
        fileContent.add(p3);
        Map<String,String> p4=new HashMap<>();
        p4.put("type","4");
        p4.put("fileId","1c2384c852d845dbbf5817636fefab64");
        fileContent.add(p4);
        Map<String,String> p5=new HashMap<>();
        p5.put("type","5");
        p5.put("fileId","1c2384c852d845dbbf5817636fefab64");
        fileContent.add(p5);
        reqData.put("fileContent", fileContent);
        commonRequest(reqData, OpenMethodEnum.AGENT_EDIT.getMethod());
    }
    @Test
    public void agentQuery() {
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("outAgentNo",  "1700103149269");
        commonRequest(reqData, OpenMethodEnum.AGENT_QUERY.getMethod());
    }
    @Test
    public void userAdd() {
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("outUserId",  System.currentTimeMillis()+"");
        reqData.put("agentId", "6");
        reqData.put("userName", "测试用户");
        reqData.put("userNick",  "测试");
        reqData.put("userPhone",  "18607115128");
        reqData.put("userPassword",  "123456");
        reqData.put("userEmail",  "29044531@163.com");
        commonRequest(reqData, OpenMethodEnum.USER_ADD.getMethod());
    }
    @Test
    public void userEdit() {
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("outUserId",  "1700209575418");
        reqData.put("agentId", "6");
        reqData.put("userName", "测试用户");
        reqData.put("userNick",  "测试xxxxx");
        reqData.put("userPhone",  "18607115128");
        reqData.put("userPassword",  "123456");
        reqData.put("userEmail",  "29044531@163.com");
        commonRequest(reqData, OpenMethodEnum.USER_EDIT.getMethod());
    }
    @Test
    public void userQuery() {
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("outUserId",  "1700209575418");
        commonRequest(reqData, OpenMethodEnum.USER_QUERY.getMethod());
    }

    @Test
    public void addFqMcht(){
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("outMchtNo", "1700571554288");
        reqData.put("agentId",  "6");
//        reqData.put("userId",  "");
        reqData.put("mchName",  "测试分期商户");
        reqData.put("mchShortName",  "测试商户");
        reqData.put("mchtType",  "3");
        reqData.put("contactName",  "李相宇");
        reqData.put("contactCertNo",  "");
        reqData.put("contactCertType",  "1");
        reqData.put("contactExpireStart",  "2023-07-24");
        reqData.put("contactExpireEnd",  "2043-07-24");
        reqData.put("contactPhone",  "18607115128");
        reqData.put("proviceCode",  "500000");
        reqData.put("cityCode",  "500100");
        reqData.put("countryCode",  "500103");
        reqData.put("address",  "重庆市五里店街道科技金融中心");
        reqData.put("contactEmail",  "2904453167@qq.com");
        reqData.put("settleCycle",  "0");
        reqData.put("legalPhone",  "18607115128");
        if("1".equals(reqData.get("mchtType"))){
            reqData.put("businessLicense",  "111111111111");
            reqData.put("businessExpireStart",  "2023-10-11");
            reqData.put("businessExpireEnd",  "2199-12-31");
            reqData.put("enterpriseScale",  "01");
            reqData.put("enterpriseCategory",  "202");
        }
        Map<String, Object> accountInfo = new HashMap<>();
        accountInfo.put("bankAccountName",  "李相宇");
        accountInfo.put("bankAccount",  "");
        accountInfo.put("settlementCardNum",  "305584018408");
        accountInfo.put("contactTel",  "18607115128");
        reqData.put("accountInfo", accountInfo);
        commonRequest(reqData, OpenMethodEnum.FQ_MCHT_ADD.getMethod());
    }
    @Test
    public void addFqEdit(){
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("outMchtNo", "1700571554288");
        reqData.put("agentId",  "6");
//        reqData.put("userId",  "");
        reqData.put("mchName",  "测试分期商户");
        reqData.put("mchShortName",  "测试商户");
        reqData.put("mchtType",  "3");
        reqData.put("contactName",  "李相宇");
        reqData.put("contactCertNo",  "");
        reqData.put("contactCertType",  "1");
        reqData.put("contactExpireStart",  "2023-07-24");
        reqData.put("contactExpireEnd",  "2043-07-24");
        reqData.put("contactPhone",  "18607115128");
        reqData.put("proviceCode",  "500000");
        reqData.put("cityCode",  "500100");
        reqData.put("countryCode",  "500103");
        reqData.put("address",  "重庆市五里店街道科技金融中心");
        reqData.put("contactEmail",  "2904453167@qq.com");
        reqData.put("settleCycle",  "0");
        reqData.put("legalPhone",  "18607115128");
        if("1".equals(reqData.get("mchtType"))){
            reqData.put("businessLicense",  "111111111111");
            reqData.put("businessExpireStart",  "2023-10-11");
            reqData.put("businessExpireEnd",  "2199-12-31");
            reqData.put("enterpriseScale",  "01");
            reqData.put("enterpriseCategory",  "202");
        }
        commonRequest(reqData, OpenMethodEnum.FQ_MCHT_EDIT.getMethod());
    }

    @Test
    public void bindCard(){
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("mchNo", "M10000008");
        reqData.put("bankAccountName",  "李相宇");
        reqData.put("bankAccount",  "6226220621768257");
        reqData.put("settlementCardNum",  "305584018408");
        reqData.put("contactTel",  "18607115128");
        commonRequest(reqData, OpenMethodEnum.FQ_MCHT_BIND_CARD.getMethod());
    }
    @Test
    public void fqAddress(){
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("mchNo", "M10000008");
        reqData.put("address1",  "湖北省恩施市小渡船街道碧桂园花语岸");
        commonRequest(reqData, OpenMethodEnum.FQ_MCHT_ADDRESS.getMethod());
    }
    @Test
    public void authToken(){
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("mchNo", "M10000008");
        reqData.put("returnUrl",  "www.baidu.com");
        commonRequest(reqData, OpenMethodEnum.FQ_MCHT_FACE_AUTH.getMethod());
    }
    @Test
    public void authTokenQuery(){
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("mchNo", "M10000008");
        reqData.put("token",  "202311220946af1c37155fad44d19c55");
        commonRequest(reqData, OpenMethodEnum.FQ_MCHT_FACE_AUTH_QUERY.getMethod());
    }
    @Test
    public void xlMchtOpen(){
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("outMchtNo", "11111111");
        reqData.put("agentId", "6");
        reqData.put("mchName",  "测试商户");
        reqData.put("username", "18607115128");
        reqData.put("loginPwd", "12345qa!");
        reqData.put("notifyUrl", "https://willcard.com.cn/asy/opentest");
        commonRequest(reqData, OpenMethodEnum.XL_MCHT_ADD.getMethod());
    }
    @Test
    public void xlMchtQuery(){
        Map<String, Object> reqData = new HashMap<>();
        reqData.put("outMchtNo", "11111111");
        commonRequest(reqData, OpenMethodEnum.XL_MCHT_QUERY.getMethod());
    }

    private String commonRequest(Map<String,Object> reqData, String method){
        Map<String,Object> map=new HashMap<>();
        String timestamp=System.currentTimeMillis()+"";
        map.put("orgAppNo",orgNo);
        map.put("reqId", UUID.randomUUID().toString());
        map.put("timestamp",timestamp);
        map.put("version","1.0");
        map.put("signType","RSA");
        map.put("method",method);
        log.info("reqData明文:"+ JSONObject.toJSONString(reqData));
        try {
            String value = SecurityUtil.publicEncrypt(JSONObject.toJSONString(reqData), pt_pubKey);
            log.info("reqData秘文:" + value);
            map.put("reqData", value);
            map.put("sign", SecurityUtil.sign(map, mer_priKey));
            log.info("签名:" + map.get("sign"));
            log.info("请求报文:" + JSON.toJSONString(map));
            String response = HttpUtil.sendJson(payUrl, JSONObject.toJSONString(map));
            log.info("响应报文:" + response);
            JSONObject res = JSONObject.parseObject(response);
            //验证签名
//        String data="";
//        String sign=res.getString("sign");
            if (SecurityUtil.verifyJsonStr(response, pt_pubKey)) {
                System.out.println("签名通过");
            } else {
                System.out.println("签名失败");
            }
            String respData = res.getString("respData");
            if(!StringUtils.isEmpty(respData)) {
                String decryptValue = SecurityUtil.privateDecrypt(respData, mer_priKey);
                log.info("respData:" + decryptValue);
                return decryptValue;
            }
            return response;
        }catch (Exception e){
            log.error("出现异常",e);
        }
        return "";
    }
}
